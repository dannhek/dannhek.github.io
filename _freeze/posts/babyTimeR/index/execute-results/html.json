{
  "hash": "a36280430e8fd46ff7411e359b85cbce",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"First CRAN Package: babyTimeR\"\nauthor: \"Dann Hekman\"\ndate: \"2025-02-19\"\ncategories: \n  - CRAN\n  - R\n  - Parenting\n---\n\n\n\n# Introduction\n\nKids, amiright?\n\n[BabyTime](https://www.babytime.care/) is an app to track things like sleep, feedings, diapers, and the like for your bundle of sleep-depriving, angry joy. They've got some data visualization tools in the app, but for data nerds who want to take this to the next level, I made this package. \n\n# Installation\n\n```r\ninstall.packages(\"babyTimeR\")\n# devtools::install_github('dannhek/babyTimeR')\n```\n\n# Getting Data\n\nSee the app for the latest workflow, but here's how it worked as of the writing of this document for an iPhone and Macbook Air.\n\nOn my iPhone: \n\n::: {.columns}\n\n::: {.column width=\"30%\"}\n\nIn the app, go to settings, then export data\n\n<img src=\"bt settings.PNG\" width=\"100px\"/>\n\n:::\n\n::: {.column width=\"30%\"}\n\nDaily Record (txt)\n\n<img src=\"export.PNG\" width=\"100px\"/>\n\n:::\n\n::: {.column width=\"40%\"}\n\nFollow the instructions here to pull the files onto your computer.\n\n<img src=\"export instructions.PNG\" width=\"100px\"/>\n\n:::\n\n::: \n\nPulling the files from finder \n\n<img src=\"in finder.png\" width=\"300px\"/>\n\n\n# Reading in data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(babyTimeR)\nsample_bt_list <- process_one_directory(\n    directory = file.path('RawData'),\n    verbose = TRUE \n)\n```\n:::\n\n\n\n\n# Features\n\nThis will read in data into a `Clean BT List DB` object, which is a `list` object with a specified structure. Each element of the list corresponds to the data type recorded in BabyTime. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stores everything to a special list\nclass(sample_bt_list)\n\n# Elements of the list correspond to the data type recorded in BabyTime. \nnames(sample_bt_list)\n\n# Includes tags and memos\nsample_bt_list$medicine |>\n    head() |>\n    gt::gt()\n```\n:::\n\n\n\n# Sleep Graph Example\n\nObviously, one of the most salient life changes for new parents is sleep, which is what drove me to write this package so we could analyze the sleep changes over time of my daughter. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample Code. Not Run.\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(babyTimeR)\n`%+%` <- function(lhs,rhs) {paste0(lhs, rhs)}\n\n# file.remove('sample_baby_db.RDS')\nif (file.exists('sample_baby_db.RDS')) {\n\tsample_baby_db <- readRDS('sample_baby_db.RDS')\n} else {\n\tsample_baby_db <- process_one_directory('Raw Data', 'sample_baby_db.RDS')\n}\n\ndisplay_time <- function(mins) {glue::glue(\"{mins %/% 60}h{mins %% 60}m\")}\nmax_na <- function(...) {\n\tx <- c(...)\n\tif\t(all(is.na(x))) {\n\t\treturn(NA)\n\t} else {\n\t\treturn(max(x, na.rm = TRUE))\n\t}\n}\n\nsleep_df <- sample_baby_db$sleep |>\n\tmutate(\n\t\tduration_min = readr::parse_number(duration),\n\t\tsleep_night = case_when(\n\t\t\thour(start_dttm) <= 6 ~ glue(\"{format(start_dttm-days(1),'%Y%m%d')}-{format(start_dttm,'%Y%m%d')}\"),\n\t\t\thour(start_dttm) >= 18~ glue(\"{format(start_dttm,'%Y%m%d')}-{format(start_dttm+days(1),'%Y%m%d')}\"),\n\t\t\t.default = 'Daytime Nap'\n\t\t) \n\t) |>\n\tselect(-baby_name,-memo,-type) |>\n\tdistinct()\n\ngg_sleep_df <- sleep_df |>\n\tfilter(sleep_night != 'Daytime Nap') |>\n\tarrange(start_dttm) |> \n\tgroup_by(sleep_night) |> \n\tmutate(\n\t\ttime_awake = difftime(start_dttm, lag(end_dttm), units = 'mins')\n\t) |> \n\tsummarise(\n\t\tn_sleep_entries = n(), \n\t\tlongest_sleep = max_na(duration_min), \n\t\twake_ups = sum(time_awake > minutes(15), na.rm = T),\n\t\tlongest_wake_up = max_na(time_awake)\n\t) \n\nvline_df <- read.csv(text=\n\"date,event\n2024-01-16,Return to work (Dad)\n2024-02-22,Baby Merlin's Magic Sleep Suit\n2024-03-02,Return to work (Mom) & Start Daycare\n2024-04-28,Own Room; Ferber Sleep Training\n\") |> \n\tmutate(date = ymd(date))\n\nage_df <- read.csv(text=\n\"date,age_months\n2023-11-01,Just Born\n2023-12-01,1 month\n2024-01-01,2 months\n2024-02-01,3 months\n2024-03-01,4 months\n2024-04-01,5 months\n2024-05-01,6 months\n2024-06-01,7 months\n2024-07-01,8 months\n2024-08-01,9 months\n2024-09-01,10 months\n2024-10-01,11 months\n2024-11-01,12 months\n\") |>\n\tmutate(\n\t\tdate = ymd(date),\n\t\tend = lead(date) - days(1)\n\t)\n\n\ncolors <- RColorBrewer::brewer.pal(name = 'Set1', n = 3)\nratio <- 60\nggplot(\n    gg_sleep_df |> drop_na(), \n    aes(x = ymd(substr(sleep_night,1,8)))\n) +\n\t# Sleep Length\n\tgeom_bar(\n        aes(\n            fill = 'Longest Sleep of Night',\n            y = longest_sleep\n            ), \n        stat = 'identity', \n        alpha = 0.4\n    ) +\n\tgeom_line(\n        aes(\n            color = 'Moving Average (Longest Sleep)',\n            y = zoo::rollmean(longest_sleep, 7, fill = NA, na.rm = T)\n        )\n    ) +\n\t# Sleep Count\n\tgeom_line(\n        aes(\n            color = 'Number of Wake-ups', \n            y = ratio*n_sleep_entries\n        )\n    ) +\n\t# Wake Length\n\tgeom_point(aes(\n        shape = 'Longest Wake Period', \n        y = as.numeric(longest_wake_up)\n    )) +\n\t# Events\n\tgeom_vline(\n        data = vline_df, \n        aes(xintercept = date), \n        linetype = 'dotted'\n    ) + \n\tgeom_text(\n        data = vline_df,\n        aes(x = date, y = 0, label = event), \n        angle = 90, vjust = 0, hjust = 0\n    ) + \n\t# Age\n\tgeom_label(\n        data = age_df, \n        aes(x = date, y = ratio*10, label = age_months), \n        hjust = 0\n    ) +\n\t# Scales \n\tscale_x_date(\n        name = 'Date',\n        date_breaks = '3 weeks',\n        date_labels = '%d%b%y',\n        limits = c(as.Date('2023-11-29'), as.Date('2025-01-31')),\n        expand = expansion(0)\n    ) +\n\tscale_y_continuous(\n        name = 'Longest Sleep',\n        labels = display_time,\n        limits = c(0,12*ratio),\n        breaks = ratio*seq(0.5,11.5,1),\n\t\tsec.axis = sec_axis(\n            ~./ratio,\n            name = 'Number of Wake-ups',\n            breaks = c(0:10)\n        )\n\t) +\n\tscale_color_manual(\n        name = '', \n        values = colors[2:3]\n    ) +\n\tscale_fill_manual(\n        name = '', \n        values = colors[1]\n    ) +\n\tscale_shape(name = '') +\n\t# Theme/Look'n'Feel\n\ttheme_minimal() +\n\ttheme(\n\t\tlegend.position = 'bottom',\n\t\taxis.text.x = element_text(angle = 60, vjust = 1, hjust = 1),\n\t\tplot.title.position = 'plot',\n\t\tplot.caption.position = 'plot'\n\t) +\n\tlabs(\n\t\ttitle = 'Overnight Sleep Trends for My Baby',\n\t\tsubtitle = 'Includes sleeps recorded as beginning between 6p and 7a',\n\t\tcaption = 'Data collected via BabyTime app'\n\t)\n```\n:::\n\n\n\n::: {.column-page}\n\n<img src=\"SleepTrend.png\"/>\n\n:::\n\n# Conclusion\n\nThis is obviously just one possible use. If you keep particularly good record of what foods you give your baby, there are lots of great visualization and infographic oppoartunities there. If anyone wants to build an ML model to identify factures that minimize wake-ups at night, I'd love to hear your results. \n\nI hope this is a helpful way for you to track your little one's activity and use the results to improve your care and life. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}